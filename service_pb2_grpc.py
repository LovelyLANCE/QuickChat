# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import service_pb2 as service__pb2


class QuickChatServiceStub(object):
    """定义聊天服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendChatInvite = channel.unary_unary(
                '/rpc.QuickChatService/SendChatInvite',
                request_serializer=service__pb2.ChatInviteRequest.SerializeToString,
                response_deserializer=service__pb2.ChatInviteResponse.FromString,
                )
        self.SendChatMemberInfo = channel.unary_unary(
                '/rpc.QuickChatService/SendChatMemberInfo',
                request_serializer=service__pb2.ChatMemberInfoRequest.SerializeToString,
                response_deserializer=service__pb2.ChatMemberInfoResponse.FromString,
                )
        self.SendChatMessage = channel.unary_unary(
                '/rpc.QuickChatService/SendChatMessage',
                request_serializer=service__pb2.ChatMessageRequest.SerializeToString,
                response_deserializer=service__pb2.ChatMessageResponse.FromString,
                )
        self.SendChatQuit = channel.unary_unary(
                '/rpc.QuickChatService/SendChatQuit',
                request_serializer=service__pb2.ChatQuitRequest.SerializeToString,
                response_deserializer=service__pb2.ChatQuitResponse.FromString,
                )
        self.SendChatDetect = channel.unary_unary(
                '/rpc.QuickChatService/SendChatDetect',
                request_serializer=service__pb2.ChatDetectRequest.SerializeToString,
                response_deserializer=service__pb2.ChatDetectResponse.FromString,
                )


class QuickChatServiceServicer(object):
    """定义聊天服务
    """

    def SendChatInvite(self, request, context):
        """发送聊天邀请
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatMemberInfo(self, request, context):
        """发送聊天成员信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatMessage(self, request, context):
        """发送聊天消息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatQuit(self, request, context):
        """退出聊天请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendChatDetect(self, request, context):
        """探测在线状况请求
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QuickChatServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendChatInvite': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatInvite,
                    request_deserializer=service__pb2.ChatInviteRequest.FromString,
                    response_serializer=service__pb2.ChatInviteResponse.SerializeToString,
            ),
            'SendChatMemberInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatMemberInfo,
                    request_deserializer=service__pb2.ChatMemberInfoRequest.FromString,
                    response_serializer=service__pb2.ChatMemberInfoResponse.SerializeToString,
            ),
            'SendChatMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatMessage,
                    request_deserializer=service__pb2.ChatMessageRequest.FromString,
                    response_serializer=service__pb2.ChatMessageResponse.SerializeToString,
            ),
            'SendChatQuit': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatQuit,
                    request_deserializer=service__pb2.ChatQuitRequest.FromString,
                    response_serializer=service__pb2.ChatQuitResponse.SerializeToString,
            ),
            'SendChatDetect': grpc.unary_unary_rpc_method_handler(
                    servicer.SendChatDetect,
                    request_deserializer=service__pb2.ChatDetectRequest.FromString,
                    response_serializer=service__pb2.ChatDetectResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rpc.QuickChatService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QuickChatService(object):
    """定义聊天服务
    """

    @staticmethod
    def SendChatInvite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.QuickChatService/SendChatInvite',
            service__pb2.ChatInviteRequest.SerializeToString,
            service__pb2.ChatInviteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChatMemberInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.QuickChatService/SendChatMemberInfo',
            service__pb2.ChatMemberInfoRequest.SerializeToString,
            service__pb2.ChatMemberInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChatMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.QuickChatService/SendChatMessage',
            service__pb2.ChatMessageRequest.SerializeToString,
            service__pb2.ChatMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChatQuit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.QuickChatService/SendChatQuit',
            service__pb2.ChatQuitRequest.SerializeToString,
            service__pb2.ChatQuitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendChatDetect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/rpc.QuickChatService/SendChatDetect',
            service__pb2.ChatDetectRequest.SerializeToString,
            service__pb2.ChatDetectResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
